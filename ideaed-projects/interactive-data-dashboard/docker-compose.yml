# Docker Compose configuration for Interactive Data Dashboard
# Supports both development and production environments

version: '3.8'

services:
  # Main application service
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: interactive-data-dashboard:${VERSION:-latest}
    container_name: dashboard-app
    restart: unless-stopped
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    environment:
      # Streamlit configuration
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ENABLE_CORS=${ENABLE_CORS:-false}
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true
      - STREAMLIT_SERVER_MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE_MB:-200}
      
      # Application configuration
      - MAX_DATA_POINTS=${MAX_DATA_POINTS:-10000}
      - DEFAULT_THEME=${DEFAULT_THEME:-plotly_white}
      - CHART_HEIGHT=${CHART_HEIGHT:-500}
      - CHART_WIDTH=${CHART_WIDTH:-700}
      - ENABLE_CACHING=${ENABLE_CACHING:-true}
      
      # Theme configuration
      - STREAMLIT_THEME_BASE=${THEME_BASE:-light}
      - STREAMLIT_THEME_PRIMARY_COLOR=${THEME_PRIMARY_COLOR:-#FF6B6B}
      - STREAMLIT_THEME_BACKGROUND_COLOR=${THEME_BACKGROUND_COLOR:-#FFFFFF}
      - STREAMLIT_THEME_SECONDARY_BACKGROUND_COLOR=${THEME_SECONDARY_BACKGROUND_COLOR:-#F0F2F6}
      - STREAMLIT_THEME_TEXT_COLOR=${THEME_TEXT_COLOR:-#262730}
      
      # Security and performance
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - dashboard_data:/app/data
      - dashboard_logs:/app/logs
      - dashboard_uploads:/app/uploads
      - dashboard_exports:/app/exports
    networks:
      - dashboard_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8501"
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-512M}

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: dashboard-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - dashboard_network
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD"
        else
          redis-server
        fi
      '
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: dashboard-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - dashboard_network
    depends_on:
      - dashboard
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dashboard-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dashboard_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: dashboard-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dashboard_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

networks:
  dashboard_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  dashboard_data:
    driver: local
  dashboard_logs:
    driver: local
  dashboard_uploads:
    driver: local
  dashboard_exports:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local