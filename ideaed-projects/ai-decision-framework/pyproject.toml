[project]
name = "ai-decision-framework"
version = "1.0.0"
description = "AI工作流vs智能体决策框架 - 帮助选择最适合的AI架构"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "AI决策框架项目组", email = "team@ai-decision-framework.com"}
]
keywords = ["ai", "decision", "framework", "workflow", "agent", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
dependencies = [
    # 核心依赖
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # LLM集成
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    
    # 数据处理
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    
    # 异步处理
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",
    
    # 监控和日志
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0"
]

[project.optional-dependencies]
# 开发依赖
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "ruff>=0.1.0"
]

# LLM扩展
llm = [
    "openai>=1.3.0",
    "anthropic>=0.8.0"
]

# 数据库支持
db = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0"
]

# Redis支持
redis = [
    "redis>=5.0.0",
    "aioredis>=2.0.0"
]

# 消息队列
queue = [
    "celery>=5.3.0",
    "kombu>=5.3.0"
]

# 完整功能
full = [
    "ai-decision-framework[dev,llm,db,redis,queue]"
]

[project.urls]
Homepage = "https://github.com/ai-decision-framework/ai-decision-framework"
Repository = "https://github.com/ai-decision-framework/ai-decision-framework.git"
Documentation = "https://ai-decision-framework.readthedocs.io"
"Bug Tracker" = "https://github.com/ai-decision-framework/ai-decision-framework/issues"

[project.scripts]
ai-decision = "ai_decision_framework.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "ai_decision_framework/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["ai_decision_framework"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py39"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["ai_decision_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
